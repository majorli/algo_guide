内存块操作
----------

事实上无论是诸如 ``int`` 这样的基础数据类型也好，还是数组、结构这样的派生数据类型也罢，都是计算机内存中的一块连续的存储空间，大小不一而已。例如现在通常的64位计算机系统里，一个C++的 ``int`` 型变量占用的是连续4个字节。C++基础数据类型的单个变量占用空间都是固定的，最小的是 ``char`` 和 ``bool`` 类型，单个变量占用一个最小单位内存，即一个字节，而 ``long long int`` 和 ``double`` 则需要8个字节，在某些系统下一个 ``long double`` 会占用16个连续字节。派生数据类型只是把组成它的基础类型变量连续存放起来而已。例如一个含有100个 ``int`` 元素的数组在内存中就是连续的400个字节。结构体占用的内存空间也是连续的，例如下面这个用来表示一个最大长度为100的顺序线性表的结构：

.. code:: c++
   
   struct List {
           double a[100];
           int len;
   };

每一个这样的 ``List`` 类型的结构变量在内存中占用804个连续的字节，其中800个字节是100个元素的 ``double a[100]`` 数组，另外4个字节用来存放表示长度的 ``int len`` 变量。如果我们需要创建16张这样的顺序表，然后把它们放在一个数组里：

.. code:: c++

   List lists[16];

这个 ``lists`` 数组就占用了一块804*16=12864字节的连续内存。凡是这样连续的内存空间我们称为 *内存块*，对于内存块的操作有时候称为 *块操作*。

我们常常需要对大型复合数据类型同时进行操作，例如我们有时候要对一个大数组进行初始化赋值，有时候我们需要清空一个大数组或者大结构里的信息，有时候我们需要把一个大数组里的内容复制到另一个大数组里。这些操作用C++语言的循环语句可以简单地完成，但是有时候我们更喜欢把这些大数据大结构看成是一个内存块对它们进行块操作。这是一种把高级视角下的事物用低级视角去考虑和处理的思路，而大自然的普遍规律往往是 **越高级的事物功能越强，但性能越差**。块操作基本上属于硬件层级的低级操作，相对于高级的C++语言操作，它的最大优势就是快！

C++语言的C标准库 ``cstring`` 中有两个常用的块操作函数，用以完成两种最基本的块操作。``memset()`` 函数用来给一个内存块里的所有字节一次性统一设置数值，``memcpy()`` 函数用来将一个内存块的内容整块复制到另一个内存块中。另外还有几个别的块操作函数，但是这两个是用得最多的。作为算法程序的辅助手段，掌握这两个函数的用法就足够了。要知道几乎每一种计算机系统都会在硬件层级实现内存块设置、复制的硬指令，而C标准库中的这些块操作函数就会充分利用计算机系统提供的硬件指令来实现块操作，它们的运行速度就是所谓的“硬件级速度”，比C++语句的速度要快上不知道多少倍。如果要操作的数据量特别大，那么用块操作函数可以节省下极大量的时间。


``memset()``：内存块设值
++++++++++++++++++++++++

``memset()`` 函数的功能是给一块指定起点、指定长度（以字节为单位）的内存块里的每一个字节都同时设置为一个指定的值。它的函数原型如下：

.. code:: c++

   void *memset(void *s, int c, size_t n);

它的返回类型是一个“无类型指针”``void *``，这是个什么东西先不用去管，反正大多数程序员一辈子都可能用不上这个返回值的，我们也不用它。它接受三个参数：

``void *s``：这个参数用来指定要操作的内存块的首地址。对于数组，我们用数组名（例如 ``a``）就可以获得它的首地址，数组名就是数组第一个元素的首地址，它等价于 ``&a[0]``；如果我们要设置的是从数组中间某个元素开始的部分，我们用 ``a+n`` 表示数组的第n号元素（注意从0开始计数）的首地址，它等价于 ``&a[n]``；对于结构或者其他任何什么别的大型变量，我们用C++的取地址运算符 ``&`` 来获得它们的首地址，就像在 ``scanf()`` 函数里所做的一样。

``int c``：这是要给每个字节设置的值。要注意，虽然这个参数的数据类型是 ``int`` ，但实际上块操作是针对字节的操作，所以最终被设置的值是这个参数值最后一个字节的内容，可以理解为 ``c % 256`` 的值。之所以把它设为 ``int`` 类型无非是为了编程方便，可以有更多的灵活方便法门。我们暂时先不要去追究这方面的窍门，并且尽量使用规范的-128到127范围内的数值（或者0到255）。

``size_t n``：内存块以字节为单位的长度，``size_t`` 其实是无符号长整型，实际使用的时候可以接受任意类型的整数。千万记得是以字节为单位的长度！例如 ``int a[100]`` 这个数组的内存块，长度是400，不是100！初学者最容易在这里掉坑！当然了，一般我们建议用 ``sizeof`` 运算来计算内存块长度。

说了这么多，如果觉得太抽象，最好的办法是直接上案例。下面所举的是在算法编程中 ``memset()`` 函数最为常见的典型用例，学会它们的使用其实也就差不多了。

