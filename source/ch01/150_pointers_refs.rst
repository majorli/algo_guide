指针 VS 引用
------------

指针和引用是C++语言编程者无法绕过的两个重要语法点。

**指针是C语言最精华的精华，也是最糟粕的糟粕**。因为有了指针，C语言才成为一种远远超越同时代的Fortran、Pascal、BASIC、ALGOL等语言，一举确立编程语言界第一任武林盟主的地位。指针给了C语言强大的能力、无与伦比的灵活性和大量的编程新技术新技巧。但也正因为指针过于强大和灵活，学习和完全掌握指针的使用难度极大，而且它又带来了非常严重的安全隐患，历史上曾经给C语言软件开发带来过大量灾难性的问题。几乎所有的C语言教程都会严正警告学习者，不要随意使用指针，不要在程序里滥用指针。指针带来的典型问题有：

1. 函数滥用指针参数，不对参数加以必要的 ``const`` 修饰，导致实参被函数代码篡改。
2. 滥用指针代替数组，超限问题更加频繁和隐蔽。
3. 滥用多重指针，导致常量被篡改。
4. 悬空指针：多个指针指向同一块动态分配的内存，随后通过其中一个释放了内存，其他指针成为悬空指针，容易导致内存泄漏。
5. 野指针：定义指针变量却未初始化，不用的指针未改为NULL，或动态分配的内存释放后没有将指针改为NULL，导致内存访问混乱。
6. 在函数体中声明指针并分配内存，把指针作为函数返回值交给调用者，容易造成内存只分配不销毁，最终导致内存耗尽。

以上是滥用指针或不正确使用指针最易发生的问题。其他还有许多情况，举不胜举。尤其是初学编程者，在尚未完全掌握的情况下如果不加节制地使用指针通常要遭遇严重问题，而且指针引发的错误和问题极难调试。

C++语言为了改善上述指针滥用问题，设计了 :emphasis:`引用` 这个机制来尽可能地替代指针。引用就是对变量增加一个别名，通过这个别名可以直接使用原变量。引用比直接操作内存地址的指针安全很多，绝大多数以前必须使用指针的场景都可以用引用来代替。另外还有一些别的场景在C语言中只能使用指针的，C++也实现了一些更加安全便捷的新方法来替代指针。所以使用C++语言绝大多数场景都可以有替代方案可以选择，但是还有少数场景指针无法或者很难被代替。下面我们一一进行介绍。


**可以用引用来完全替代指针的场景**


1、用来使函数代码可以修改实参

有时候我们需要函数代码能够改变为它提供形参值的外部变量的值，最典型的例子就是交换两个变量的值。在C语言里只能采用指针作为参数。但是在C++语言里我们强烈建议用传引用来代替传指针。

.. attention::

   和传指针的参数一样，传引用的参数不能用字面量或者表达式给它喂值，它必须接收一个实实在在的变量。


2、用来传递数组作为函数参数

C++引用加模板可以完美实现传递数组作为函数参数，请参阅上一节的介绍：:ref:`模板参数：搞定数组作为函数参数时的种种不爽<ref_140_template_array>`。


3、用来传递大型结构变量作为函数参数

我们知道C++函数的普通参数传递采用的是传值方式，也就是说实参值是复制一份具体的值喂给形参的。那么如果我们传递的参数是一个很大型的结构变量时，复制这个参数值会占用大内存，消耗较多时间。这一问题最严重的情况是结构的成员变量中有大型数组，例如一个封装好的顺序表。C语言采用传递指针的方法来解决这一问题，函数的参数接收一个该结构类型的指针。C++语言则用传引用来解决这个问题，我们强烈建议使用引用而不是指针。如果我们不允许函数代码改变被引用的结构，那么我们给参数表中的这个参数前加上 ``const`` 限制。


4、用作函数返回值

为什么函数有时候要返回引用？主要也是为了节约时间和空间。通常C++函数也是用传值的方式来返回值的，也就是说C++会在函数返回时为 ``return`` 后面的值创建一个临时变量，然后把具体的值复制到该临时变量里去进行返回。这种操作的性能问题仍然出现在需要返回一个大型结构变量时，和前面所说的情况类似。在C语言时代为了解决这个隐患只能采用返回指针的方法，但是存在安全隐患太多。C++则允许函数返回一个引用，这样就不会创建临时变量和复制返回的具体值了。

.. warning::

   函数如果要返回引用，因为引用必须背后有一个实实在在的变量作为支撑，所以绝对不能返回在函数内部创建的局部变量的引用。局部变量在函数返回的时候是会被销毁的，如果返回局部变量的引用，那么这个引用就会失效。这一点其实和返回指针很类似，如果函数的返回值是指针，同样是禁止返回局部变量的指针的。

所以如果函数要返回引用，它的返回值就只能是另一个在外部实际存在的变量的引用。而在函数内部唯一可以接触到外部变量的地方就只有参数表，所以参数表里必须至少有一个同类型的引用参数可供用作返回值。

.. attention::
   
   由于引用可以视作是它背后那个实际的变量的别名，所以返回引用的函数本身可以成为一种“可赋值”的东西，完全可以有这样诡异的语句存在：``func(a) = b;``。这种特性有时候可以用来实现可连续赋值，但是太过诡异了，绝少会需要用到这样的语句。为了避免出现把函数调用作为被赋值对象的尴尬场面，我们可以在函数头的最前面加上常量修饰 ``const``。

总之，函数返回引用的情况比较复杂，一般情况下还是要尽量避免使用，事实上绝大多数情况是可以避免的。


**无法或难以避免使用指针的情况**

1、C字符串


2、动态内存管理



3、动态顺序数据结构


4、链式数据结构




（待续）