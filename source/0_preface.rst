前言
====

目标读者
--------
* 对C/C++语言有初步了解，能使用g++编译器编译运行C++语言程序。
* 计划参加NOI、CSP-J/S等认证考试或算法竞赛。

代码环境
--------
* 所有代码符合C++98规范，并在NOI Linux下用g++ 4.8.4编译器编译运行通过。
* 代码在Windows系统下使用Dev C++编译运行可能会有微小差异。

算法编程 vs 工程编程
---------------------------------
算法编程和工程编程在编码风格、程序设计等多个方面存在许多不同之处，作为算法编程的学习者，常会养成许多被工程编程视为洪水猛兽的“坏习惯”。此处逐一列举说明，以便在工程编程实践时予以避免。

1. **不对输入数据进行有效性检验：** 算法编程总是认为输入数据不会有无效数据，例如格式错误、数据类型错误、超限、遗漏、重复等，因此在输入时不进行数据有效性检验。
2. **代码可读性差：** 算法编程极少出现多人合作的情况，基本都是独自完成，而且程序一般都是以解决单一问题为目标的简单结构。因此代码可读性往往很差。主要表现为：

   * 变量、函数、自定义类型取名简短甚至无意义，例如 ``int a``；
   * 变量命名不符惯例，例如用大写字母命名变量，小写字母命名常量；
   * 代码不写注释，甚至自定义函数、类型都不写注释；
   * 自定义函数不使用函数原型(prototype)和函数定义(definition)分离的原则，所有自定义函数在 ``main()`` 函数前直接定义。

3. **大量使用全局变量：** 算法编程时出于方便起见常大量使用全局变量，而工程编程的一条铁律就是“不到万不得已绝不使用全局变量”。算法编程中全局变量滥用的主要原因为：

   * 超大型数组：无法声明为局部变量的超大型数组，在算法编程时往往会绕过复杂的动态内存分配机制，转而使用全局变量；
   * 避免数据初始化：局部变量必须由程序进行显式的初始化，而全局变量会自动初始化为全0，此一便利使得算法编程时大多数人爱用全局变量；
   * 减少自定义函数的参数：使用全局变量，使得所有自定义函数均能直接使用这些变量，从而避免了过长的函数参数列表，特别是数组和大结构体作为函数参数时更为方便。

上述算法编程中常见的“坏习惯”均为工程编程所不容。在算法编程这一非常特殊的领域，它们确实能带来诸多便捷，但是若用在工程实践中，其弊端远大于便利。由算法开始学习编程者尤其要注意这些问题。

纯C++ vs C/C++混合
--------------------
C++语言是C语言的扩展，它不光有自己的一整套完整的编程语言体系和功能强大的STL模板库，而且完全继承了来自传统C语言的所有标准库功能。算法竞赛和等级考试即将全面停止纯C语言的使用，全面转为使用C++语言。但是一部分继承自传统C语言标准库的功能由于速度远快于C++语言中新提供的对应功能，仍然会被许多编程者继续使用，而且笔试的考卷上也仍然常会出现此类传统C语言代码。因此C++算法编程者仍有必要学习掌握这些来自传统C语言的内容，本书中的代码也常会使用到C语言的一些特性，并不限于仅使用C++语言的新特性。以下为必须掌握的传统C语言特性。

1. 输入输出：来自 ``cstdio`` 标准库的 ``printf()``、``scanf()``、``getchar()``、``putchar()`` 四个函数属于必须掌握的内容，另外最好掌握 ``fgets()`` 函数的使用，它们的运行速度远远高于C++ 的标准输入输出流，且在数值类型数据的格式化输出时具有更强的便捷性和灵活性。
2. 数据类型：来自 ``ctype`` 标准库的 ``isXXX()`` 系列字符种类判断函数，``toupper()`` 和 ``tolower()`` 两个大小写转换函数，来自 ``climits`` 库的用于表示九种基本数据类型的最大值和最小值的预定义宏，例如表示 ``int`` 型数据的最大值的 ``INT_MAX``，以上属于应掌握的内容。
3. 字符串：传统的使用字符型数组来实现的C字符串属于必须掌握内容，必须熟知其概念，并会熟练使用数组操作来进行简单的字符串处理，同时应能熟练使用来自 ``cstring`` 标准库的 ``strlen()``、``strcpy()``、``strcpy()`` 三个函数，最好能对 ``cstring`` 库中其他的C字符串处理函数有一定的了解。

