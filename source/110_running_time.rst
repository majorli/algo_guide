测定程序运行时间
----------------

算法程序非常注重运行时间，因此有时需要精确测定程序运行所耗的时间。C++语言可以使用继承自C语言的 ``ctime`` 库来完成这一任务。

要测定一段程序运行所耗费的时间，需要用到C标准库 ``ctime`` 中提供的计算机时钟函数 ``clock()``。

.. code-block:: c++

   clock_t clock();

其中 ``clock_t`` 是 ``ctime`` 库中定义的一种适合于存放计算机时钟数的数据类型，实际上是一个 ``long int``。

这个函数会返回程序运行到当前位置时所耗费的计算机时钟数，所以如果在要测定运行时间的程序段前后分别运行这个函数，得到的前后两个时钟数之差就是运行这段程序所耗费的计算机时钟数，而计算机时钟是一个非常精准的微秒甚至纳秒级的计时器。

但是计算机时钟数怎么对应到日常使用的时间单位呢？在 ``ctime`` 库中有一个预定义的常量 ``CLOCKS_PER_SEC``，它表示每秒钟的计算机时钟数。 

.. hint::

   *通常在现在常见的计算机中这个数字会是1,000,000，也就是说每一秒钟的计算机时钟数是一百万次，或者说一个计算机时钟是一微秒。*

所以我们获得的时钟数除以 ``CLOCKS_PER_SEC`` 就能得到以秒为单位的运行时间。当然秒这个单位对于算法程序来说太大了，一般我们使用毫秒为运行时间的单位，所以我们要除以 ``CLOCKS_PER_SEC / 1000``，这样得到的就是毫秒级的运行时间。

.. hint::

   *以上所述都是指整数的除法运算，得到的运行时间也都是向下取整的整数值。如果希望得到更精确的以小数表示的运行时间，或者用多级单位表示的形如 ``1s130ms697us`` 的结果，也是并不困难的事情，只是通常没有这个必要。*

**代码示例**

下面的示例程序，使用一个单循环计算从1到100,000的十万个正整数的平方，并存放在一个数组中。为了测试运行速度，我们加入了测定运行时间的功能。

.. literalinclude:: codes/1.1_running_time.cpp
   :language: c++
   :linenos:
   :emphasize-lines: 6-8,16-17

运行这个小程序得到结果可能是这样的（具体数值因不同的运行环境而异）：

.. code-block:: none

   100000 times of i^i computed using a for loop.
   Start at 1944 clocks, end at 3960 clocks.
   Time elapsed = 2016 clocks.
   CLOCKS_PER_SEC = 1000000
   In ms, time elapsed = 2 ms.

