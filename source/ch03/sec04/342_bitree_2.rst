二叉树(II) 层序访问
++++++++++++++++++++

前面学习了二叉树的基本知识和链式、顺序两种存储结构的实现方法。但是我们发现，光这些完全不足以有效地使用二叉树结构，甚至无法有效地创建出一棵二叉树。

造成这一问题的原因是树结构的特殊性。对于一棵二叉树中的某一个节点，不能像线性表元素一样有一个确定的毫无歧义的序号来标定它所在的位置。要让计算机程序知道二叉树中某一个节点的位置，需要一个从根节点出发的路径。因此，如果我们只有一系列的数据项是不足以创建出所需要的二叉树的，还需要每一个数据项的路径，或者确定每一个数据项路径的规则才行。

在实际应用中，二叉树的节点路径规则可以是多种多样的，不同的规则能生成出不同的二叉树。经典的二叉树节点规则有二叉检索树规则、红黑树规则等。这一节我们将介绍一种最简单的层序访问规则。

层序创建完全二叉树
^^^^^^^^^^^^^^^^^^

仅给定一个数据项序列但没有规定节点定位规则的时候，我们可以用层序存储的规则来创建出一棵完全二叉树。在没有对节点定位规则做多余假设的情况下，默认采用层序来构造完全二叉树是最合理的设想了，因为完全二叉树是层数最少，空间利用最合理的情况。

设给定了一个长度为 :math:`n` 的元素序列 :math:`a[0..n-1]`\ 。

二叉树的层序遍历
^^^^^^^^^^^^^^^^

一个数据结构最重要的操作就是要能够访问存储在其中的数据。二叉树不是线性数据结构，很难像线性表一样通过一个位置值来访问到某一个特定的节点，要指定一个节点在二叉树中的所在位置，一般需要用一条路径，比如左左右左右这样的。这样就比较麻烦了，所以一般对树（或者森林、网、图这样的非线性数据结构）中元素的访问，多采用\ :strong:`遍历`\ （traversal）的方法，即按照某种\ :strong:`确定的规则`\ ，沿一条\ :strong:`途径所有节点`\ 且\ :strong:`不重复`\ 的路线\ :strong:`完整地`\ 游历整棵树，从而\ :strong:`依次`\ 访问到所有的数据项。遍历的规则也叫做遍历的\ :strong:`序`\ ，不同序的遍历，访问元素的顺序就不同。

二叉树有四种常见的遍历序：先序（pre-order）、中序（in-order）、后续（post-order）和层序（layer-order），其中层序遍历又分为从左到右和从右到左两种。而先中后三种序的遍历则是数据结构和算法中最重要最基础的知识之一，需要熟练掌握。

先序、中序和后续遍历
^^^^^^^^^^^^^^^^^^^^


层序遍历
^^^^^^^^

