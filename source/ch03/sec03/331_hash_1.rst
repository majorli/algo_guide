哈希表：基本概念
++++++++++++++++

\ :strong:`哈希表`\ （Hash Table）是一种比较特殊，又相当重要的数据结构。在本部分的引言部分我们已经简单介绍过，哈希表虽然名字也叫做表，但是它不是简单的依次线性存放元素，在哈希表中，元素无法确保其插入顺序。

.. important::

   哈希表不是一种线性表！

哈希表的主要目的是实现快速的数据存取访问。一般的线性表，要么是常数级访问线性级增删（顺序表），要么是常数级增删线性级访问（链表），而哈希表的目标是元素增删查改的操作全部常数时间。要怎样才能达到这个目的呢？如果我们有办法根据元素自身的一些特定特征直接得到一个唯一的编号，那么我们就可以用这个唯一编号作为位置信息，在一个顺序表里组织存放元素，这样就可以实现增删查改全部为常数级时间。

为了实现上面的想法，我们首先需要每一个元素都有一个唯一的特定特征，不同的元素这个特征不会相同。通常我们称元素的这个唯一的特征为\ :strong:`键`\ （key），或者叫\ :strong:`关键字`\ 。要存放在哈希表中的元素，除了自身的\ :strong:`值`\ （value）以外，还需要有一个不会重复的唯一的键。换句话说，如果两个元素的键相同，那么它们俩的值也一定相同。这样的元素也被称为\ :strong:`键值对`\ （key-value pair）。

.. important::

   哈希表是用来存放键值对数据的数据结构，它能以常数 :math:`O(1)` 时间实现元素的增删查改操作。

当然了，最简单的情况是元素值本身就无重复，那么就可以直接把元素的值当做键来使用，这在实际问题中是很常见的。事实上集合就是存放键值同一的元素的哈希表，映射则是存放键值不同的元素的哈希表。

举个简单的例子，假如数据为若干个100以内的正整数，不含100，且互不相等。那么数据的值就可以直接用作键，最简单的哈希表就是开一个长度为100的逻辑型数组，初始化为全 ``false``\ 。要新增一个数，就用它的值作为数组的下标，将数组中对应位置改成 ``true`` 即可。要删除一个数，只要以这个数为下标修改数组中的值为 ``false`` 即可。如果要查找某个100以内的整数是不是在表中，就是以该数为下标去查看数组中对应位置是不是 ``true``\ 。这个例子里，修改元素无非是依次删除原元素、增加新元素而已。增删查改四种操作全部为 :math:`O(1)` 时间。

.. admonition:: 练习

   上面这个简单的例子，编程也非常简单，请自己动手试一试。

但是实际上极少有这么简单的情况。实际的情况往往会有以下这些问题：

1. 键的取值范围非常大，比如数据在整个 ``int`` 范围内取值，那上面这种简单的方法就需要开一个长度为2\ :superscript:`32`\ 的数组，也就是至少4GB的空间。如果数据的取值范围为 ``long long`` 范围，那就需要开一个长度为2\ :superscript:`64`\ 的数组，怕是全世界也没有那么大内存可用。
2. 键的数据类型不是整数，比如浮点数、字符串或者别的更加复杂的结构类型，那么就无法把键值直接用作数组下标。

上面两个问题是实际中普遍存在的，为了解决这些问题，我们需要定义和使用\ :strong:`哈希函数`\ （Hash Function）。

哈希函数
^^^^^^^^

哈希函数是这样一种函数，它是一个从键到一定范围内的非负整数的映射。换句话说，哈希函数把数据元素的键值变成对应的哈希表下标值。哈希函数的自变量数据类型和取值范围和键完全相同，自变量的值就是键值。它返回的函数值是一个非负整数，并且有明确的取值范围。哈希函数的返回值被称为哈希值，当一个哈希函数被用来构建哈希表的时候，键值对应的哈希值就用做该元素要存放到底层数组中去时的数组下标值，因此用于构建哈希表的哈希函数返回值取值范围要求与底层数组的下标值范围一致。

.. attention::

   哈希函数并不一定是用来构建哈希表的，哈希值也并不总是用作哈希表的下标值。例如MD5算法其实就是一个哈希函数的算法，它的作用是为一段字符串生成一个密钥，用于数据传输校验或者数据加密。

用数学符号表示哈希函数为 :math:`h=H(k)`\ ，其中 :math:`k` 为键值，:math:`h` 表示其对应的哈希值。前面所举的那个简单例子，实际上是用了一个等值函数 :math:`H(k)=k` 作为哈希函数构建了哈希表。而遇到两类实际问题的时候，显然我们需要一些更加精巧的哈希函数。

下面我们介绍几种常见的哈希函数。请注意，下面介绍的这些哈希函数都是比较简单的，一般用于数据结构与算法教学使用，它们在某些算法问题中可以使用，但一般都不适用于实际的工程软件应用。要设计一种适合实用的哈希函数是一项复杂的技术活，一般并不需要掌握，而常见的实用哈希函数也都会有现成的工程库可以调用，不需要自己编程实现。



