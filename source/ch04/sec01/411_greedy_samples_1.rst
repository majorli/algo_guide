贪心法案例一：任务调度问题
++++++++++++++++++++++++++++++++++

有 :math:`N` 项任务 :math:`\{J_1,J_2,\dots,J_N\}` 提交给计算中心的大型服务器来进行计算，每项任务都有一个固定的计算时长 :math:`\{t_1,t_2,\dots,t_N\}`。服务器同时只能执行一项任务，现在要对这些任务进行合理调度以达到最佳的运行效率。调度的评价指标有两种，分别为\ :strong:`“规定时间内完成任务数量最多”`\ 和\ :strong:`任务全部完成时总等待时长最短`。现在要分别按这两种评价指标对任务进行调度。

规定时间内完成任务数量最多
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

给定一段时间 :math:`m`，要求在前 :math:`m` 时间段内完成的任务数量最多。

这是一个非常天然的贪心法可解问题。我们只需把所有任务按其计算时长进行从小到大的排序，得到新序列 :math:`\{t_{d_1},t_{d_2},\dots,t_{d_N}\}`。然后按顺序从前向后地调度任务，直到规定的时间 :math:`m` 恰好用光或已经不够执行下一个任务为止，就得到了一个符合条件的调度。换句话说，就是找到一个满足条件 :math:`\sum_{i=1}^Tt_{d_T} \le m` 的最大的 :math:`T`，:math:`(1 \le T \le N)`，就可以得到最优解 :math:`\{J_{d_1},J_{d_2},\dots,J_{T}\}` 


任务全部完成时总等待时长最短
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
