贪心法（I）：任务调度问题
++++++++++++++++++++++++++++++++++

有 :math:`n` 项任务 :math:`\{1,2,\dots,n\}` 提交给计算中心的服务器来进行计算，每项任务都有一个固定的计算时长 :math:`\{t_1,t_2,\dots,t_n\}`。如何调度这些任务的先后顺序和服务器分配，以便获得最佳效率，这类问题常被称为\ :strong:`任务调度问题`。

任务调度问题有多种形式，根据可用的服务器数量不同可以分为\ :strong:`单机调度`\ 问题和\ :strong:`多机调度`\ 问题，根据调度目标的不同一般又有\ :strong:`最大完成效率`\ 和\ :strong`最短等待时间`\ 两种。

单机调度问题可以使用贪心法求得最优解，而多机调度问题不仅不能用贪心法求最优解，还是一种\ :strong:`NP-hard`\ 问题，也叫\ :strong:`NP难题`。这里我们先看看解决单机调度问题的贪心算法。

服务器同时只能执行一项任务，现在要对这些任务进行合理调度以达到最佳的运行效率。调度的评价指标有两种，分别为\ :strong:`“规定时间内完成任务数量最多”`\ 和\ :strong:`任务全部完成时总等待时长最短`。现在要分别按这两种评价指标对任务进行调度。

规定时间内完成任务数量最多
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

给定一段时间 :math:`m`，要求在前 :math:`m` 时间段内完成的任务数量最多。

这是一个非常天然的贪心法可解问题。我们只需把所有任务按其计算时长进行从小到大的排序，得到新序列 :math:`\{t_{d_1},t_{d_2},\dots,t_{d_N}\}`。然后按顺序从前向后地调度任务，直到规定的时间 :math:`m` 恰好用光或已经不够执行下一个任务为止，就得到了一个符合条件的调度。换句话说，就是找到一个满足条件 :math:`\sum_{i=1}^Tt_{d_T} \le m` 的最大的 :math:`T`，:math:`(1 \le T \le N)`，就可以得到最优解 :math:`\{J_{d_1},J_{d_2},\dots,J_{T}\}` 


任务全部完成时总等待时长最短
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
