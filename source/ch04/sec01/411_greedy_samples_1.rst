贪心法（I）：背包问题
++++++++++++++++++++++++++++++++++

背包问题是一类非常经典的算法问题，它是要把 :math:`n` 种不同物品有选择地放进一个背包中，物品有各自的重量 :math:`\{w_1,w_2,\dots,w_n\}` 和价值 :math:`\{v_1,v_2,\dots,v_n\}`，背包有最大承重限制 :math:`W`，我们要选择一个最优的物品组合放入背包中，使得背包中物品的总价值 :math:`V` 最大。通常这些重量和价值都采用正整数来表示。

常见的背包问题有\ :strong:`部分背包问题`、:strong:`0-1背包问题`、:strong:`完全背包问题`\ 和\ :strong:`多重背包问题`。其中前两种是最常见的，后两种是0-1背包问题的变种。这里面只有部分背包问题是贪心法可解的。其他三种都不适用贪心法，尽管它们都有一种可行的伪多项式时间算法，但实际上它们甚至都是NP难题。下面我们分别对部分背包问题的贪心算法和0-1背包问题的贪心法不可解性质进行介绍。至于0-1背包问题及其他两种变种的伪多项式时间算法，是一种必学、常考的经典动态规划算法，我们将在讲述动态规划的章节中进行介绍。


部分背包问题
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在部分背包问题中，所有的物品都是可以拆分的，最小可以拆到重量为1。部分背包问题的另一种常见形式是不同浓度的溶液混合，使混合后的溶液浓度最大化。

部分背包问题是可以用贪心法求解的，但是要正确选择贪心策略。对于背包问题，选择物品的策略有三种：一是依据重量选择，重量越小的越优先；二是依据价值选择，价值越大的越优先；三是依据单位重量的价值选择，单位重量的价值越大的越优先。

按照生活经验，直观地就会选择第三种贪心策略，按单位价值进行从大到小的选择（似乎用混合溶液的提法更容易直观理解）。那么如何用精准的数学语言来证明它呢？这个证明要利用到部分背包问题的一个特殊性质，背包总是能够被塞满，因此最终放入背包的物品的重量总和恒等于 :math:`W`。

设有一个候选解 :math:`\{x_1,x_2,\dots,x_m\}`，其中 :math:`x_i` 表示物品 :math:`i` 放入背包中的重量，:math:`x_1+x_2+\cdots+x_m=W`。它们已经按照各自的单位重量价值 :math:`p_i` 从小到大排好序，:math:`p_1\lt p_2\lt\cdots\lt p_m`。所以该解总价值为 :math:`V=x_1p_1+x_2p_2+\cdots+x_mp_m`。

现在再假设还有一种未被选中的物品 :math:`k`，它的单位重量价值 :math:`p_k \gt p_m`。如果我们用它来替换候选解里单位价值最大的那个物品 :math:`m` 的话会怎样？

* 假如 :math:`w_k\ge x_m`，那么候选解里的物品 :math:`m` 可以完全替换为物品 :math:`k`，:math:`x_m=x_k`，候选解变成 :math:`\{x_1,x_2,\dots,x_{m-1},x_k\}`，这个新解的总价值为 :math:`V^\prime = x_1p_1+x_2p_2+\cdots+x_{m-1}p_{m-1}+x_mp_k`。由于 :math:`p_k \gt p_m`，所以 :math:`V^\prime \gt V`；
* 否则，:math:`w_k \lt x_m`，我们就从 :math:`x_m` 中取走等于 :math:`w_k` 重量的部分，然后把所有物品 :math:`k` 填进去，保证总重量还是 :math:`W` 不变。现在得到了一个新的解 :math:`x_1,x_2,\dots,x_m-w_k,w_k`，总价值变成 :math:`V^\prime = x_1p_1+x_2p_2+\cdots+(x_m-w_k)p_m+w_kp_k`。整理后得到 :math:`V^\prime = x_1p_1+x_2p_2+\cdots+x_mp_m+w_k(p_k-p_m)=V+w_k(p_k-p_m)\gt V`。

可见，对于任意一个候选解，只要还存在单位价值比候选解中所有物品的单位价值都更大的未放入背包的物品，就应该用它来替换候选解里面单位价值最大的那种物品。这样的替换

0-1背包问题初探
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^





