回文字符串
++++++++++++++++++

我们在前面简单数值算法时曾将讲过回文的概念，当时我们主要着眼于回文数，严格地说是回文整数的相关问题，现在我们要重点讲一讲回文字符串的一些基本算法。

我们已经知道回文的概念，所以回文字符串的概念就不言而明了，当然就是从左到右念和从右到左念完全一样的字符串，比如 ``"level"``，比如 ``"ABCDCBA"``。在这一节，我们先解决最基本的问题，怎样判断一个字符串是否为回文串。然后我们设法来解决一个经典的回文串问题，最大回文子串问题。

解决最大回文子串问题的方法有很多，我们先通过蛮力法来了解一些基本知识，然后学习一种比较容易理解和编程的方法：中心扩展法，它的时间复杂度是 :math:`O(n^2)`。由于中心扩展法编程比较简单，不使用什么复杂的数据结构，消耗空间仅为常数级的 :math:`O(1)`，时间上也能满足大多数提高组及以下难度算法题的限制，所以是初期比较好用的一种算法，需要认真学习掌握。

最大回文子串问题的另一个 :math:`O(n^2)` 时间算法是一种动态规划法，但它并不是很好。它的速度不比中心扩展法快，而且它的空间复杂度同样高达是 :math:`O(n^2)`，因此我们只打算对它进行一个简单的原理介绍。希望能够让大家对五大经典算法设计方法中最灵活最难掌握的动态规划法有一个初步的认识，有兴趣的可以动手自己试一试编程。

而最经典的最大回文子串问题解法是一个叫做Manacher算法的方法，通常习惯用谐音称呼它为\ :strong:`马拉车算法`。这个算法非常高明，非常精妙，时间复杂度低至 :math:`O(n)`，但是这个算法非常复杂，非常难掌握。普及组和提高组水平时一般不太指望能在考场上快速地写出一个正确的马拉车算法程序来，所以我们将在后面的章节再详细介绍马拉车算法，现阶段能熟练掌握中心扩展算法即可。


回文串的判断
^^^^^^^^^^^^^^^^^^^^



最大回文子串（蛮力、动态规划和中心扩展）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

一、蛮力法



二、动态规划法



.. index:: 最大回文子串：中心扩展法

三、中心扩展法










（待续）
