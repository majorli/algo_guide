字符串处理基础
++++++++++++++++++++++++++++++++

**基本概念**

字符串说到底就是由一系列字符按照一定顺序排列而成的，我们目前只处理ASCII字符串，在C++语言中就是一连串的char。正如前面所说，C++有继承自C语言的C-string和自己特有的C++ string类型两种字符串解决方案。

1、传统的C-string采用一个char型数组来存放字符串，以一个空字符 ``\0`` 来标识字符串的结尾，例如：

.. code-block:: c++

   char str[10] = "Hello\n";

就是一个字符串，在内存中，这个C-string的实际存储情况是：

.. image:: ../../images/231_cstring.png


由于C-string本质上就是一个数组，所以可以用访问数组元素的方式访问其中的单个字符，例如 ``str[0]`` 就是第1个字符 ``'H'``。也可以方便地使用指针，还记得数组的名字就是指向第一个元素的指针吗？所以 ``*(str+5)`` 就是第6个字符 ``'\n'``，这是一个“换行”字符（newline）。每个C-string的最后一定要用一个空字符 ``'\0'`` （NULL）来标识结尾，否则C++就不知道该到哪里结束了，这个特殊的空字符的实际数值就等于0，所以可以视作整数0，也可以视作逻辑值false，这就给C-string的字符串处理带来了很大的便利。

.. attention::

   正因为有一个空字符收尾，C-string才成为了字符串，而不是普通的字符数组。但是这个空字符是不计入字符串的长度的。

.. warning::

   和数组一样，采用C-string方式处理字符串，最大的危险是长度超限。一定要记住，长度为n的数组，最多能存放的字符串长度为n-1！因为至少要留出一个元素的位置来存放收尾的空字符。

要处理C-string方式的字符串，需要引入C语言标准库cstring，其中包含了一些最基本的字符串处理函数，例如测量长度、收尾相接、复制内容、字典序比较、子串搜索等。它们的共同点是速度快，使用简单，但是功能有限，有几个函数使用起来还有点怪异。

2、C++的string类型则是一个定义完好的封装起来的类，它的底层是向程序员隐蔽起来的，但它开放了许多功能强大的成员函数供编程使用。定义一个C++ string非常方便，和定义一个基本数据类型的变量一模一样，例如：

.. code-block:: c++

   string str = "Hello\n";


要访问string中指定位置的字符，也有两种方法，和C-string非常类似。通常我们也用 ``[]`` 下标运算符，例如 ``str[1]`` 就可以访问到第2个字符 ``'e'``。也可以用和指针非常相似的迭代器来访问元素，``str.begin()`` 返回头迭代器，指向第1个字符，``str.end()`` 则返回尾迭代器，指向最后一个字符的后面一个位置。所以 ``*(str.begin()+1)`` 就是第2个字符 ``'e'``，而 ``*(str.end()-1)`` 则是最后一个字符 ``'\n'``。我们可以自己定义一个类型为 ``string::iterator`` 的变量来存放迭代器。例如下面这段代码片段会从尾到头逆向地输出字符串中的每一个字符：

.. code-block:: c++

   for (string::iterator it = str.end(); it >= str.begin(); --it)
           cout << *it;

string是一个定义完好的C++类，它除了速度比C-string略慢外，其他各方面都比C-string要优秀得多。例如它没有长度超限的危险，它可以自动根据内容来调整自己占用的空间，它的成员函数也比cstring库函数丰富和强大得多。

在后面的内容中我们先使用C-string来进行简单字符串处理，当对C-string及其常用操作有了一定的了解，能够阅读一些简单的程序代码的时候就将转为全面使用C++ string。这一节我们先来看两个非常简单的问题：周期串判断和子序列判断。这是《算法入门经典（第2版）》第三章的两个练习题，都是来自OJ网站UVa的题目。


.. index:: 【周期串】, 〖UVa455〗

周期串问题（UVa455）
^^^^^^^^^^^^^^^^^^^^^^



.. index:: 【子序列】, 〖UVa10340〗

子序列问题（UVa10340）
^^^^^^^^^^^^^^^^^^^^^^




（待续）
