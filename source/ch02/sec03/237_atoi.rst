初识有限自动机：字符串转整数
++++++++++++++++++++++++++++++++++++++++

前一节我们介绍了利用字符串流实现字符串转整数乃至字符串转任意数值类型的简便方法。这种方法很方便，功能也很强，但是速度相当慢。为什么呢？主要原因有三个：

1. 字符串输入流并不是为某一种特定的转换单独设计的，它需要可以读取C++支持的各种基本数据类型，包括各种整型、浮点型、字符、字符串，其中整型的还分为有符号的、无符号的两类。这么多数据类型都有各自的读取和转换规则。功能太强是它速度慢的第一个原因。

2. 因为字符串中的输入文本不能保证一定格式正确，所以字符串输入流在读取的同时，还要进行正确性识别。发现有问题的时候，有时候可能需要进行类型转换，有时候可能需要报错处理。具有错误处理能力是它速度慢的第二个原因。

3. 有时候输入的文本格式并不错误，但不规范。比如可能在高位上会有填充的0，像用 ``"002"`` 来表示整数2；也可能前后有多余的空白符，像 ``"  2\t\n"`` 这样的，这时候字符串输入流又要进行额外的分析处理。容错性是它速度慢的第三个原因。

当然还有一些其他更深层次的原因，总之用字符串输入流来进行“文本”到“数”的转换，速度是比较慢的。

类似“文本”转“数”这样的问题还有很多，它们是计算机科学中一个极其重要的超级领域，一般称作\ :strong:`文本分析`。所谓“文本”，在计算机里的表示方式就是字符串，或长或短，短的比如一个单词、一个数字，长的可能是一本电子书，但它们终归就是一个字符串。“文本分析”要做的就是对文本进行分析，获取文本中的信息，进而可以根据这些信息进行进一步的处理。为什么说它是“超级领域”呢？

首先，它的重要性是超级的。计算机科学中有大量极重要的任务都是基于文本分析的，比如机器翻译、机器阅读。而其中最为经典最为超级的一个例子就是计算机程序的编译。我们编写的C++语言程序，其源代码就是一个长文本，在编译器的眼里无非就是一个长长的字符串。编译器在读入源程序后，要应用词法分析、语法分析这些高级文本分析技术对它进行分析，找出其中的错误，找出可能存在问题的地方发出警告，最终要对代码进行优化，并翻译成计算机可以直接运行的机器语言程序。整个编译过程充斥着极为复杂精细的大量文本分析技术，可说是计算机文本分析的集大成者。

第二，文本分析的难度也是超级的。考虑一下如果我们要自己编程实现字符串转整数的算法，有下面这些要求（与C语言标准库里的 ``atoi()`` 函数一致）:

1、要能丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

2、当我们寻找到的第一个非空字符为正号或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成正整数。

3、字符串中有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于转换不应该造成影响。

4、假如字符串中的第一个非空格字符不是一个有效整数字符（正号、负号和数字）、字符串为空或字符串仅包含空白字符时，则表示该字符串不能进行有效转换，此时应取0。

5、转换的目标数据类型为int，如果字符串中的数值超过了其取值范围 :math:`[−2^{31},2^{31}−1]`，那就视情况取 :math:`−2^{31}` 或 :math:`2^{31}−1`。

例如：``"42"`` 转为42；``"   -42"`` 转为-42；``"4193 with words"`` 的转换中止于字符 ``'3'``，因为它的下一个字符不是数字，得到4193；``"words and 987"`` 第一个非空字符是 ``'w'``，不是数字或正、负号，因此无法执行有效的转换，得0；``"-91283472332"`` 则会转为-2147483648，因为数字-91283472332超过了int范围的下限，所以得到下限值−2\ :superscript:`31`\ =-2147483648。

.. admonition:: 问题版权

   来源：力扣（LeetCode）

   链接：https://leetcode-cn.com/problems/string-to-integer-atoi
   
   著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这是文本分析领域中最为简单的问题，没有之一！但是仔细去想一想，自己尝试一下就会发现，其复杂程度远超想象（在力扣网站中此题的难度等级为中等），更何况编译器这样的超级问题了。事实上，在大学计算机科学专业的所有课程中，编译原理都是一个超级杀手，在考场上收割不及格人数就像割韭菜一般，可见其有多难。

第三，文本分析技术的数学原理和工具也是非常超级的。目前主流的文本分析技术，都基于一种叫做“自动机理论”的深奥的数学基础理论，具体来说是应用了其中的\ :strong:`有限状态自动机`\ 这一类数学模型，通常也简称为\ :strong:`有限自动机`。基于这种数学模型，就发展出了大量的词法分析工具、语法分析工具，都是非常神奇的文本分析技术。而在词法分析领域，又衍生出了一种程序员的超级大杀器：:strong:`正则表达式`，可以用来自动地识别、匹配文本中任意指定格式的信息。例如 ``[+-]?[0-9]+`` 就是一个用来匹配任意整数的正则表达式。

学习文本分析的经典算法和模型，是算法学习的重要内容，也是难点。而且中等难度的文本分析问题是NOI等算法竞赛的常见题型，所以我们一定要掌握这一类问题的常见解法。这一节我们就先来认识一下有限状态自动机，认识几个正则表达式的入门级规则，并且利用它们来解决上面这个字符串转整数（atoi）问题。

虽然atoi问题只是文本分析的入门级问题，但是通过它我们可以了解有限自动机和正则表达式的基本原理，掌握它们的基本用法，是非常重要的基础。关于它们这两个终极武器更全面更深入的学习，我们在以后更难的题目中继续。


正则表达式简介
^^^^^^^^^^^^^^^^^^^^^^^^^^



有限状态自动机
^^^^^^^^^^^^^^^^^^^^^^^^^^





atoi问题
^^^^^^^^^^^^^^^^^^^^^^^^^^




（待续）
