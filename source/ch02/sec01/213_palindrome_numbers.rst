回文数专题
++++++++++

\ :strong:`回文`\ （palindrome）是指这样一种文字，它从左到右读和从右到左读是一样的，例如英语单词\ :emphasis:`level`，例如《道德经》中的句子\ :emphasis:`“信言不美，美言不信”`。虽然英语的词法和语法决定了英文只有回文词，构不成回文句，但是如果把句子中单词和单词之间的空格去掉，英语也可以有正着看和反着看一样的回文句。例如拿破仑被流放到厄尔巴岛时说的一句话，“在我看到Elba岛之前我曾所向无敌”，它的英文就是英语中最著名的一句回文句：:emphasis:`Able was I ere I saw Elba`。

类似的，正读反渎都一样的整数就被称为\ :strong:`回文数`。例如：1，11，121，2002，20199102，这些都是回文数。而12，132，2020这些就不是回文数。

一般来说回文数是指自然数，即0和正整数。负数由于前面有一个负号，所以绝不能是回文数。但是有些算法题里特别说明，对于负数，如果其绝对值是回文数那么就算它也是回文数。像这样的特殊说明可能并没有用文字说出来，而是在样例中给了一个例子来说明，审题一定要仔细！还有一些题目会特别认定在去除小数点后剩余的数字成为回文数时也认为这个小数是回文数，例如 12.21。这些特殊情况只是拓宽了回文数的认定范围，回文数本身的规则并没有什么不同，用于处理自然数回文数的算法稍加修改就可以适应这些负数或小数回文数，所以这里我们不打算对它们做专门介绍，我们的讨论范围仍然是自然数。

回文数有两个特点非常有用。

1. 不证自明，所有的一位数必然是回文数：:math:`\{0,1,2,3,4,5,6,7,8,9\}`。
2. 偶数位的回文数，除了11以外全部是合数，它们都有因数11。

第二个性质的证明并不难，把一个回文数按十进制数的占位表示法在各位上展开即可证明，用数学归纳法来证明比较简单。

首先考虑两位回文数，一共只有9个：11，22，33，44，55，66，77，88，99。显然除了11是质数以外，其他都是合数而且有因数11。

再看四位回文数的情况，任何一个四位回文数都可以表示为 :math:`\overline{abba}=1000a+100b+10b+a=1001a+110b`，由于 :math:`1001=91\times11` 所以四位回文数一定能被11整除。

对于更多位数的偶数位回文数，设任意 :math:`2k` 位回文数 :math:`A_{2k}=\overline{a_k\cdots a_1a_1\cdots a_k}` 都是可以被11整除的，那么 :math:`2k+2` 位的回文数都可以表示为 :math:`A_{2k+2}=\overline{a_{k+1}A_{2k}a_{k+1}}=(10^{2k+1}+1)\cdot a_{k+1}+A_{2k}\cdot 10`。由于 :math:`A_{2k}` 能被11整除，我们只需证明 :math:`10^{2k+1}+1` 能被11整除就可以了。对这个数字的表达式做以下变形处理：

.. math::

   10^{2k+1}+1=10^{2k+1}-10+11=10\times(10^{2k}-1)+11=10\times\overline{\underbrace{9\cdots9}_{2k个9}}+11

所以它能被11整除。所以 :math:`2k+2` 位回文数也可以被11整除。

这就用数学归纳法证明了所有偶数位的回文数除了11以外全都是合数。


整数取位
^^^^^^^^

取一个十进制整数中指定位上的数是最基本的整数算法，不光是回文数算法的基础，也是所有数值算法的基础。

整数取位的原理非常简单。数学里，一个十进制整数从右到左各位一般依次称作“个位、十位、百位、千位、万位、十万位......”，或者用序号叫做“小数点左边第1位、第2位、第3位......”。计算机编程时一般采用序号的方式。每一个位的序号和这个位上的基的幂次是对应的，第 :math:`i` 位的十进制基就是 :math:`10^{i-1}`。例如个位就是第1位，个位的十进制基就是 :math:`10^0=1`，千位是第4位，所以它的基就是 :math:`10^3=1000`。

对于n位的十进制整数，要取它的个位数很简单，除10取余就是它的个位数。如果要取其第 :math:`i` 上的数 :math:`i>1`，把它在第 :math:`i` 位和第 :math:`i-1` 位中间断开形成一左一右两个整数，然后取左边那个的个位数就可以了。例如取整数1234的个位数，只要除10取余就可以得到个位数4，如果要取百位数，百位是第3位，所以先除以10\ :superscript:`2`\ =100，得到的商就是从百位和十位之间断开后形成的左边那个整数12，对其除10取余得个位数2，它就是1234的百位数。

仔细想想，其实对于任意的序号 :math:`i\ge1`，都可以用这个方法，先除以 :math:`10^{i-1}` 取商，然后对商除10取余得到个位数，就是原数的第 :math:`i` 位数。这个算法在序号为1时，在序号超过原数的最高位时，都是正确可用的。而对于负数，C++取余运算的规则将使得取到的数也是负数（或0），例如取-876的十位数降得到-7。有时候这个特点非常有用。

使用上述数学方法，很容易编写出整数取位的C++函数。

.. literalinclude:: ../../codes/213_palindrom.cpp
   :language: c++
   :lines: 3-7


整数按位取反
^^^^^^^^^^^^



回文数判断
^^^^^^^^^^




寻找回文质数（USACO1.5；洛谷P1217）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


